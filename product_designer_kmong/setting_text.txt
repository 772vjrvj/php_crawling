Laravel을 사용하여 PHP 웹 서버를 구성


■ php 다운로드

1. https://www.php.net/downloads.php 접속
2. Current Stable PHP --> Windows downloads
3. VS17 x64 Non Thread Safe -->  Zip 다운로드

1. 환경 변수 설정 방법 (Windows)
파일 탐색기에서 "내 PC" (또는 "내 컴퓨터")를 우클릭하고 속성을 클릭합니다.
왼쪽에서 고급 시스템 설정을 클릭합니다.
시스템 속성 창에서 환경 변수 버튼을 클릭합니다.
시스템 변수 영역에서 Path 항목을 찾아 편집 버튼을 클릭합니다.
새로 만들기 버튼을 클릭하고, C:\php\php-8.4.2-nts-Win32-vs17-x64 경로를 추가합니다.

2. Path에 추가할 경로 확인
경로는 PHP의 bin 디렉토리가 포함되어야 합니다.
예: C:\php\php-8.4.2-nts-Win32-vs17-x64 경로가 정확한 경우, PHP 실행 파일인 php.exe가 해당 폴더에 존재하므로 이 폴더 자체를 추가합니다.
따라서 환경 변수에 추가할 경로는:
C:\php\php-8.4.2-nts-Win32-vs17-x64

3. 변경 사항 적용
새로운 명령 프롬프트를 열고, php -v 명령어를 입력하여 PHP가 정상적으로 인식되는지 확인합니다.
php -v를 입력하여 PHP 버전 정보가 출력되면 정상적으로 설정이 완료된 것입니다.
php -v 또는 php --version


버전 체크
-------------------------------------------------------------------
C:\Users\772vj>php -v
PHP 8.4.2 (cli) (built: Dec 17 2024 17:28:28) (NTS Visual C++ 2022 x64)
Copyright (c) The PHP Group
Zend Engine v4.4.2, Copyright (c) Zend Technologies
-------------------------------------------------------------------

헬로 월드 출력
php -r "echo 'Hello World';"
-------------------------------------------------------------------
C:\Users\772vj>php -r "echo 'Hello World';"
Hello World
-------------------------------------------------------------------





■ composer 설치 

https://getcomposer.org/download/

Composer 설치 방법
1. Composer 다운로드
Windows:

Composer 공식 웹사이트로 이동합니다.
"Composer-Setup.exe"를 다운로드하여 실행하세요.
설치 중에 PHP 경로를 확인하거나 추가해야 할 수 있습니다.

아래 둘다 체크 안함
Developer Mode
Use a proxy server to connect to the internet



■ vscode에서 라라벨 설치

1. PHP Intelephense
기능: PHP 코드 자동 완성, 구문 검사, 함수 정의로 이동, 코드 분석.

2. PHP Debug
기능: PHP 코드 디버깅을 위한 Xdebug 지원.


3. PHP Namespace Resolver
기능: PHP 클래스의 네임스페이스를 자동으로 추가하거나 정리.


4. Laravel Snippets
기능: Laravel Blade 템플릿 및 PHP 코드의 단축 입력 지원.

5. Laravel Blade Spacer
기능: Blade 템플릿의 태그와 코드 간의 공백을 자동으로 추가.


6. Laravel Extra Intellisense
기능: 라라벨 전용 메서드와 팩토리 패턴에 대한 Intellisense 지원.


7. Prettier - Code formatter
PHP 코드를 자동으로 포맷


8. DotENV
.env 파일을 색상으로 구분해 가독성을 높여줍니다.


9.
GitLens
Git 변경 이력 및 협업 상황을 바로 확인.




■ 필수 설정
PHP 실행 파일 경로 설정

PHP가 설치된 경로를 VS Code에 알려야 합니다.
settings.json 파일에 추가:
{
    "php.executablePath": "C:/php/php-8.4.2-nts-Win32-vs17-x64/php.exe"
}



Intelephense 키워드 설정

더 많은 라라벨 기능 지원을 위해 intelephense에 라라벨 키워드를 추가합니다:
{
	"intelephense.environment.includePaths": [
		"vendor/**/*.php"
	]
}



Xdebug 디버깅 설정

launch.json 파일에 추가:
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Listen for Xdebug",
      "type": "php",
      "request": "launch",
      "port": 9003
    }
  ]
}



Laravel 프로젝트를 생성
composer create-project --prefer-dist laravel/laravel 프로젝트이름

create-project: 새 프로젝트를 생성합니다.
--prefer-dist: 안정된 릴리스 버전을 설치합니다.
laravel/laravel: Laravel 기본 패키지입니다.
my-laravel-app: 생성할 폴더 이름입니다.


cd my-laravel-app

php artisan serve


브라우저 확인 브라우저에서 http://127.0.0.1:8000으로 접속해 Laravel 기본 화면이 표시되는지 확인하세요.


■ php.ini 추가 설정
해결 방법: PHP zip 확장 활성화
PHP의 php.ini 파일을 엽니다:

경로: C:\php\php-8.4.2-nts-Win32-vs17-x64\php.ini
아래 내용을 찾아 주석(;)을 제거합니다:

ini
코드 복사
;extension=zip
변경 후:

ini
코드 복사
extension=zip
변경 후, 명령 프롬프트를 다시 열고 PHP를 재확인합니다:

bash
코드 복사
php --ini
zip 확장이 활성화되었는지 확인합니다:

bash
코드 복사
php -m | findstr zip
결과에 zip이 포함되어 있어야 합니다.

composer install 로 재설치




■ 서버 실행 
php artisan serve

http://127.0.0.1:8000/

Illuminate\Encryption\MissingAppKeyException
No application encryption key has been specified.
GET 127.0.0.1:8000
PHP 8.4.2 — Laravel 11.37.0
키가 없음


.env 파일을 열고 APP_KEY 값이 비어 있는지 확인하세요:
env
APP_KEY=


Laravel의 키 생성 명령어를 실행하여 APP_KEY를 생성합니다:
php artisan key:generate
명령 실행 후, .env 파일의 APP_KEY 값이 자동으로 채워집니다:


env
APP_KEY=base64:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=



■ DB 설정
.env 아래로 수정
DB_DATABASE=D:/GitHub/php_crawling/product_designer/database/database.sqlite

설정 반영
.env 파일을 수정한 후 Laravel 설정 캐시를 초기화해야 변경 내용이 반영됩니다:

bash
php artisan config:clear

데이터베이스 초기화
데이터베이스 테이블을 생성하려면 아래 명령어를 실행하세요:

bash
php artisan migrate


Illuminate\Database\QueryException
could not find driver (Connection: sqlite, SQL: PRAGMA foreign_keys = ON;)
GET localhost:8000
PHP 8.4.2 — Laravel 11.37.0

단계 2: SQLite 관련 확장 활성화
php.ini 파일에서 아래 항목을 찾습니다:
ini
코드 복사
;extension=pdo_sqlite
;extension=sqlite3
위 두 줄에서 주석(;)을 제거하여 다음과 같이 수정합니다:
ini
코드 복사
extension=pdo_sqlite
extension=sqlite3


Illuminate\Database\QueryException
SQLSTATE[HY000]: General error: 1 no such table: sessions (Connection: sqlite, SQL: select * from "sessions" where "id" = Svx2RGaZHzNdlHIzQGGPPldBxKmb3xiBIvSRBERV limit 1)
GET localhost:8000
PHP 8.4.2 — Laravel 11.37.


php artisan migrate
1. 데이터베이스 마이그레이션 실행
Laravel에서 데이터베이스 테이블을 생성하려면 아래 명령어를 실행하세요:

bash
php artisan migrate
이 명령어는 기본적으로 sessions, users, password_resets 등 Laravel에서 기본적으로 사용하는 테이블을 생성합니다.





■ Laravel의 기본 구성
Laravel 프로젝트는 아래와 같은 주요 디렉토리와 파일들로 구성됩니다.

1. 디렉토리 구조
루트 디렉토리
app/
애플리케이션의 핵심 로직이 위치하며, 모델, 컨트롤러, 서비스 등이 포함됩니다.

Http/Controllers/: 라우트 요청을 처리하는 컨트롤러 파일이 저장됩니다.
Models/: Eloquent ORM 모델 클래스가 저장됩니다.
Http/Middleware/: 요청이 컨트롤러에 도달하기 전에 실행되는 필터가 정의됩니다.
bootstrap/
Laravel 애플리케이션을 부트스트랩하는 파일들이 포함됩니다.

cache/: 성능 최적화를 위한 캐시 파일.
config/
모든 환경 설정 파일이 포함됩니다. (예: app.php, database.php, mail.php)

database/
데이터베이스 관련 파일이 포함됩니다.

마이그레이션: 데이터베이스 테이블 구조를 정의.
시드: 초기 데이터 삽입.
public/
웹 서버의 진입점으로, index.php 파일이 포함되어 있습니다.

브라우저에서 이 디렉토리의 파일이 제공됩니다.
resources/
사용자 인터페이스와 관련된 파일들.

views/: Blade 템플릿 파일.
lang/: 다국어 지원.
routes/
모든 라우트 정의 파일.

web.php: 웹 라우트를 정의합니다.
api.php: API 라우트를 정의합니다.
storage/
애플리케이션의 로그, 캐시, 업로드된 파일 등이 저장됩니다.

vendor/
Composer를 통해 설치된 모든 패키지와 의존성 파일이 저장됩니다.



Laravel의 전체적인 구성과 실행 방식을 이해하는 것은 효과적인 개발을 위해 매우 중요합니다. Laravel은 MVC(Model-View-Controller) 아키텍처를 기반으로 하며, 다양한 컴포넌트가 조화를 이루어 동작합니다.

Laravel의 기본 구성
Laravel 프로젝트는 아래와 같은 주요 디렉토리와 파일들로 구성됩니다.

1. 디렉토리 구조
루트 디렉토리
app/
애플리케이션의 핵심 로직이 위치하며, 모델, 컨트롤러, 서비스 등이 포함됩니다.

Http/Controllers/: 라우트 요청을 처리하는 컨트롤러 파일이 저장됩니다.
Models/: Eloquent ORM 모델 클래스가 저장됩니다.
Http/Middleware/: 요청이 컨트롤러에 도달하기 전에 실행되는 필터가 정의됩니다.
bootstrap/
Laravel 애플리케이션을 부트스트랩하는 파일들이 포함됩니다.

cache/: 성능 최적화를 위한 캐시 파일.
config/
모든 환경 설정 파일이 포함됩니다. (예: app.php, database.php, mail.php)

database/
데이터베이스 관련 파일이 포함됩니다.

마이그레이션: 데이터베이스 테이블 구조를 정의.
시드: 초기 데이터 삽입.
public/
웹 서버의 진입점으로, index.php 파일이 포함되어 있습니다.

브라우저에서 이 디렉토리의 파일이 제공됩니다.
resources/
사용자 인터페이스와 관련된 파일들.

views/: Blade 템플릿 파일.
lang/: 다국어 지원.
routes/
모든 라우트 정의 파일.

web.php: 웹 라우트를 정의합니다.
api.php: API 라우트를 정의합니다.
storage/
애플리케이션의 로그, 캐시, 업로드된 파일 등이 저장됩니다.

vendor/
Composer를 통해 설치된 모든 패키지와 의존성 파일이 저장됩니다.

2. 주요 파일
.env
환경 변수 설정 파일. 데이터베이스, 메일 서버, APP_KEY 등을 설정합니다.
composer.json
프로젝트의 의존성을 정의합니다.
artisan
Laravel CLI(Command Line Interface) 도구.




■ Laravel의 실행 흐름
Laravel 애플리케이션이 실행되는 과정은 다음과 같습니다:

1. 클라이언트 요청
사용자가 브라우저에서 URL(예: /hello)에 접속합니다.
2. Public 디렉토리
**public/index.php**가 모든 요청의 진입점입니다.
여기서 Laravel의 **커널(Kernel)**이 부트스트랩됩니다.
3. HTTP Kernel 처리
app/Http/Kernel.php가 실행되며, 애플리케이션의 미들웨어를 처리합니다.
미들웨어: 요청을 처리하기 전/후에 실행되는 필터.
4. 라우트 처리
요청이 **라우팅 시스템(routes/web.php)**으로 전달됩니다.
URL에 매핑된 컨트롤러나 클로저 함수가 실행됩니다.
5. 컨트롤러
라우트가 매핑된 컨트롤러 메서드를 호출합니다.
예: ExampleController의 index 메서드.
6. 모델
컨트롤러는 필요한 데이터를 데이터베이스에서 가져오기 위해 Eloquent 모델을 호출합니다.
Eloquent는 Laravel의 ORM(Object-Relational Mapping)입니다.
7. 뷰
컨트롤러는 데이터를 처리한 후, 결과를 Blade 템플릿에 전달합니다.
Blade는 Laravel의 템플릿 엔진으로, HTML과 PHP를 혼합해 동적으로 렌더링합니다.
8. 응답 반환
렌더링된 HTML이 클라이언트(브라우저)에 반환됩니다.


■ Laravel에서는 artisan 명령어로 미들웨어 파일을 생성할 수 있습니다.
명령어:
bash
코드 복사
php artisan make:middleware LogMiddleware
결과:
app/Http/Middleware/LogMiddleware.php 파일이 생성됩니다.